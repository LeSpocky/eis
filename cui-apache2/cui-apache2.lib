#----------------------------------------------------------------------------
# /var/install/include/apache2 - Apache Virtual Hosts shell functions
#
# Creation:     2006-2013 the eisfair team, team(at)eisfair(dot)org
# Last Update:  $Id: apache2 31561 2013-03-11 12:41:55Z jv $
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#----------------------------------------------------------------------------

# only include this file once
if [ "$_APACHE2LIB" != "true" ]
then

_APACHE2LIB='true'

get_next_free_vhost_number () {
    if [ "$APACHE2_VHOST_1_IP" != "" ]
    then
        idx=1
        while [ "`eval tmp='$APACHE2_VHOST_'$idx'_IP';echo $tmp`" != "" ]
        do
            eval docroottmp='$APACHE2_VHOST_'$idx'_DOCUMENT_ROOT'
            eval iptmp='$APACHE2_VHOST_'$idx'_IP'

            if [ -z "$docroottmp" -a -z "$iptmp" ]
            then
                break
            fi
            idx=`expr $idx + 1`
        done
    else
        idx=1
    fi
}

parse_vhost_vars () {
    eval active='$APACHE2_VHOST_'$idx'_ACTIVE'
    eval ip='$APACHE2_VHOST_'$idx'_IP'
    eval port='$APACHE2_VHOST_'$idx'_PORT'
    eval servername='$APACHE2_VHOST_'$idx'_SERVER_NAME'
    eval serveralias='$APACHE2_VHOST_'$idx'_SERVER_ALIAS'
    eval mail='$APACHE2_VHOST_'$idx'_SERVER_ADMIN'
    eval docroot='$APACHE2_VHOST_'$idx'_DOCUMENT_ROOT'
    eval scriptalias='$APACHE2_VHOST_'$idx'_SCRIPT_ALIAS'
    eval scriptdir='$APACHE2_VHOST_'$idx'_SCRIPT_DIR'
    eval errorlog='$APACHE2_VHOST_'$idx'_ERROR_LOG'
    eval accesslog='$APACHE2_VHOST_'$idx'_ACCESS_LOG'
    eval accesscontrol='$APACHE2_VHOST_'$idx'_ACCESS_CONTROL'
    eval ssl='$APACHE2_VHOST_'$idx'_SSL'
    eval sslport='$APACHE2_VHOST_'$idx'_SSL_PORT'
    eval forcessl='$APACHE2_VHOST_'$idx'_SSL_FORCE'
    eval sslcertname='$APACHE2_VHOST_'$idx'_SSL_CERT_NAME'
}

print_vhost_vars () {
    [ -z "$active" ]      && active="yes"
    [ -z "$port" ]        && port=80
    [ -z "$ssl" ]         && ssl="no"
    [ -z "$sslport" ]     && sslport=443
    [ -z "$forcessl" ]    && forcessl="no"
    [ -z "$sslcertname" ] && sslcertname="apache"
 
    eval "APACHE2_VHOST_"$idx"_ACTIVE='$active'"
    eval "APACHE2_VHOST_"$idx"_IP='$ip'"
    eval "APACHE2_VHOST_"$idx"_PORT='$port'"
    eval "APACHE2_VHOST_"$idx"_SERVER_NAME='$servername'"
    eval "APACHE2_VHOST_"$idx"_SERVER_ALIAS='$serveralias'"
    eval "APACHE2_VHOST_"$idx"_SERVER_ADMIN='$mail'"
    eval "APACHE2_VHOST_"$idx"_DOCUMENT_ROOT='$docroot'"
    eval "APACHE2_VHOST_"$idx"_SCRIPT_ALIAS='$scriptalias'"
    eval "APACHE2_VHOST_"$idx"_SCRIPT_DIR='$scriptdir'"
    eval "APACHE2_VHOST_"$idx"_ERROR_LOG='$errorlog'"
    eval "APACHE2_VHOST_"$idx"_ACCESS_LOG='$accesslog'"
    eval "APACHE2_VHOST_"$idx"_ACCESS_CONTROL='$accesscontrol'"
    eval "APACHE2_VHOST_"$idx"_SSL='$ssl'"
    eval "APACHE2_VHOST_"$idx"_SSL_PORT='$sslport'"
    eval "APACHE2_VHOST_"$idx"_SSL_FORCE='$forcessl'"
    eval "APACHE2_VHOST_"$idx"_SSL_CERT_NAME='$sslcertname'"
}

unset_vhost_vars () {
    local idx

    idx=1
    while [ $idx -le $APACHE2_VHOST_N ]
    do
        eval 'APACHE2_VHOST_'$idx'_ACTIVE'=""
        eval 'APACHE2_VHOST_'$idx'_IP'=""
        eval 'APACHE2_VHOST_'$idx'_PORT'=""
        eval 'APACHE2_VHOST_'$idx'_SERVER_NAME'=""
        eval 'APACHE2_VHOST_'$idx'_SERVER_ALIAS'=""
        eval 'APACHE2_VHOST_'$idx'_SERVER_ADMIN'=""
        eval 'APACHE2_VHOST_'$idx'_DOCUMENT_ROOT'=""
        eval 'APACHE2_VHOST_'$idx'_SCRIPT_ALIAS'=""
        eval 'APACHE2_VHOST_'$idx'_SCRIPT_DIR'=""
        eval 'APACHE2_VHOST_'$idx'_ERROR_LOG'=""
        eval 'APACHE2_VHOST_'$idx'_ACCESS_LOG'=""
        eval 'APACHE2_VHOST_'$idx'_ACCESS_CONTROL'=""
        eval 'APACHE2_VHOST_'$idx'_SSL'=""
        eval 'APACHE2_VHOST_'$idx'_SSL_PORT'=""
        eval 'APACHE2_VHOST_'$idx'_SSL_FORCE'=""
        eval 'APACHE2_VHOST_'$idx'_SSL_CERT_NAME'=""

        idx=`expr $idx + 1`
    done
    parse_vhost_vars

}

createVHostDirDirective () {
    vhostIdx=1
    eval noDirs='$APACHE2_VHOST_'$idx'_DIR_N'

    while [ "$vhostIdx" -le "$noDirs" ]
    do
        eval vhostActive='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_ACTIVE'
        eval vhostUseAlias='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_ALIAS'
        eval vhostAlias='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_ALIAS_NAME'
        eval vhostPath='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_PATH'
        eval vhostAuth_name='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_AUTH_NAME'
        eval vhostAuth_type='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_AUTH_TYPE'
        eval vhostAuth_n='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_AUTH_N'
        eval vhostCgi='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_CGI'
        eval vhostSsi='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_SSI'
        eval vhostAccess='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_ACCESS_CONTROL'
        eval vhostContent='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_VIEW_DIR_CONTENT'
        eval vhostWebdav='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_WEBDAV'

        if [ "$vhostActive" = "yes" ]
        then
            if [ "$vhostUseAlias" = "yes" ]
            then
                echo "    Alias $vhostAlias $vhostPath"
            fi

            #echo "Adding directory $vhostPath ..." >`tty`
            echo "    <Directory $vhostPath>"
            echo -n '        Options FollowSymLinks MultiViews'
            if [ "$vhostSsi" = "yes" ]
            then
                echo -n ' Includes'
            fi
            if [ "$vhostCgi" != "none" ]
            then
                echo -n ' ExecCGI'
            fi

            if [ "$vhostContent" = "yes" ]
            then
                echo ' Indexes'
            else
                echo
            fi
            if [ "$vhostCgi" != "none" ]
            then
                echo '        AddHandler cgi-script '$vhostCgi
            fi
            if [ "$vhostSsi" = "yes" ]
            then
                echo '        AddType text/html .shtml'
                echo '        AddHandler server-parsed .shtml'
            fi
            if [ "$vhostAuth_n" != "0" ]
            then
                mkdir -p /etc/apache2/conf.d/passwd
	            if [ "${vhostAuth_type}" = "Basic" ]
	           	then
		            echo '    AuthType Basic'
	           	else
		            echo '    AuthType Digest'
		            echo '    AuthDigestDomain '${vhostAuth_name}
		            echo '    AuthDigestProvider file'
	            fi
	            echo '        AuthName "'${vhostAuth_name}'"'
	            echo '        AuthUserFile /etc/apache2/conf.d/passwd/passwords.'${idx}.$vhostIdx
	            echo '        require valid-user'
                rm -f /etc/apache2/conf.d/passwd/passwords.${idx}.$vhostIdx
                touch /etc/apache2/conf.d/passwd/passwords.${idx}.$vhostIdx

                vhostIdx2=1
                while [ "$vhostIdx2" -le "$vhostAuth_n" ]
                do
                    eval user='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_AUTH_'$vhostIdx2'_USER'
                    eval pass='$APACHE2_VHOST_'$idx'_DIR_'$vhostIdx'_AUTH_'$vhostIdx2'_PASS'

		            if [ "${vhostAuth_type}" = "Basic" ]
	    	       	then
		                /usr/local/apache2/bin/htpasswd -b /etc/apache2/conf.d/passwd/passwords.${idx}.$vhostIdx $user $pass 2>/dev/null
	        	   	else
	                    # hash the username, realm, and password
	                    htdigest_hash=`printf "$user:$vhostAuth_name:$pass" | md5sum -`
	                    # build an htdigest appropriate line, and tack it onto the file
	                    echo "${user}:${vhostAuth_name}:${htdigest_hash:0:32}" >> /etc/apache2/conf.d/passwd/passwords.$idx.$vhostIdx
		            fi
                    vhostIdx2=`expr $vhostIdx2 + 1`
                done
                chown -R ${APACHE2_USERNAME}.${APACHE2_GROUPNAME} /etc/apache2/conf.d/passwd
                chmod 700 /etc/apache2/conf.d/passwd
                chmod 600 /etc/apache2/conf.d/passwd/*
            fi

            if [ "$vhostWebdav" = "yes" ]
            then
                mkdir -p /usr/local/apache2/var
                chown ${APACHE2_USERNAME}.${APACHE2_GROUPNAME} /usr/local/apache2/var

                echo "Dav on"
            fi

            echo '        AllowOverride All'
            echo '        Require all denied'
            echo "        Require $vhostAccess granted"
            echo '    </Directory>'

            if [ ! -d $vhostPath ]
            then
                mkdir -p $vhostPath
                touch $vhostPath/index.html
                echo "<h1>GEHEIM!</h1>">$vhostPath/index.html
                chown -R ${APACHE2_USERNAME}.${APACHE2_GROUPNAME} $vhostPath
            fi
        fi
        vhostIdx=`expr $vhostIdx + 1`
    done
}

# end only include once
fi
#============================================================================
# end
#============================================================================
